openapi: '3.0.1'
info:
  title: MPEG-21 Smart Contracts for Media OpenAPI
  description: '<b>Context:</b> This API definition is derived from the Smart Contracts for Media CD. <br><b>Scope:</b> This API permits to obtain Media Contractual Objects that reference MPEG-21 CEL/MCO contracts <br>The API should be offered an MPEG21 Smart Contract for Media transformer implementation. <br><b>Authors:</b> Mirko Zichichi and Víctor Rodríguez Doncel. Ontology Engineering Group. Universidad Politécnica de Madrid.'
  version: '0.1.0'
  contact:
    name: MPEG-21 Smart Contracts for Media
    url: https://mpeg.expert/software/MPEG/Systems/mpeg-21/smartcontracts/openApi
externalDocs:
  description: API Documentation
  url: https://mpeg21-scm-openapi.herokuapp.com/docs
servers:
  - url: https://mpeg21-scm-openapi.herokuapp.com/scm/api
    description: Development Server
paths:
  /contracts/{contractIdref}:
    get:
      tags:
        - 'Contract'
      summary: 'Returns all the data of a contract object'
      operationId: 'getContract'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
      responses:
        200:
          $ref: '#/components/responses/contract'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/parties/:
    get:
      tags:
        - 'Party'
      summary: 'Returns the ids of parties of a contract object'
      operationId: 'getParties'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
      responses:
        200:
          description: 'an array of parties ids'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partyIdref'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/parties/{partyIdref}:
    get:
      tags:
        - 'Party'
      summary: 'Returns all the data of a party object'
      operationId: 'getPartyBy'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
        - $ref: '#/components/parameters/partyIdref'
      responses:
        200:
          $ref: '#/components/responses/party'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/otherPersonUsers/:
    get:
      tags:
        - 'Party'
      summary: 'Returns the ids of otherPersonUsers of a contract object'
      operationId: 'getOtherPersonUsers'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
      responses:
        200:
          description: 'an array of personUser ids'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/personUserIdref'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/otherPersonUsers/{personUserIdref}:
    get:
      tags:
        - 'Party'
      summary: 'Returns all the data of a personUser object'
      operationId: 'getOtherPersonUsersBy'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
        - $ref: '#/components/parameters/personUserIdref'
      responses:
        200:
          $ref: '#/components/responses/personUser'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/deontics/:
    get:
      tags:
        - 'Deontic'
      summary: 'Returns the ids of deontic expressions of a contract object'
      operationId: 'getDeontics'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
      responses:
        200:
          description: 'an array of deontic expression ids'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/deonticIdref'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/deontics/{deonticIdref}:
    get:
      tags:
        - 'Deontic'
      summary: 'Returns all the data of a deontic object'
      operationId: 'getDeonticBy'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
        - $ref: '#/components/parameters/deonticIdref'
      responses:
        200:
          $ref: '#/components/responses/deontic'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/deontics/{deonticIdref}/conditions/:
    get:
      tags:
        - 'Deontic'
      summary: 'Returns the ids of conditions of a deontic object'
      operationId: 'getPrePostConditions'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
        - $ref: '#/components/parameters/deonticIdref'
      responses:
        200:
          description: 'an array of condition ids'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/conditionIdref'
        400:
          $ref: '#/components/responses/idError'
  ? /contracts/{contractIdref}/deontics/{deonticIdref}/conditions/{conditionIdref}
  : get:
      tags:
        - 'Deontic'
      summary: 'Returns all the data of a cel condition object'
      operationId: 'getPrePostCondition'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
        - $ref: '#/components/parameters/deonticIdref'
        - $ref: '#/components/parameters/conditionIdref'
      responses:
        200:
          $ref: '#/components/responses/celCondition'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/operativePart/:
    get:
      tags:
        - 'Deontic'
      summary: 'Returns the ids of deontic structured blocks of a contract object'
      operationId: 'getOperativePart'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
      responses:
        200:
          description: 'an array of deontic structured blocks ids'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/deonticStructuredBlockIdref'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/operativePart/{deonticStructuredBlockIdref}:
    get:
      tags:
        - 'Deontic'
      summary: 'Returns the ids of deontics of a deontic structured block object'
      operationId: 'getDeonticStructuredBlock'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
        - $ref: '#/components/parameters/deonticStructuredBlockIdref'
      responses:
        200:
          description: 'an array of deontic expression ids'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/deonticIdref'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/actions/:
    get:
      tags:
        - 'Action'
      summary: 'Returns the ids of actions of a contract object'
      operationId: 'getActions'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
      responses:
        200:
          description: 'an array of action ids'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/actionIdref'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/actions/{actionIdref}:
    get:
      tags:
        - 'Action'
      summary: 'Returns all the data of an action object'
      operationId: 'getActionBy'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
        - $ref: '#/components/parameters/actionIdref'
      responses:
        200:
          $ref: '#/components/responses/action'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/objects/:
    get:
      tags:
        - 'Object'
      summary: 'Returns the ids of objects of a contract object'
      operationId: 'getObject'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
      responses:
        200:
          description: 'an array of object ids'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/objectIdref'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/objects/{objectIdref}:
    get:
      tags:
        - 'Object'
      summary: 'Returns all the data of an object object'
      operationId: 'getObjectBy'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
        - $ref: '#/components/parameters/objectIdref'
      responses:
        200:
          $ref: '#/components/responses/object'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/facts/:
    get:
      tags:
        - 'Fact'
      summary: 'Returns the ids of facts of a contract object'
      operationId: 'getFacts'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
      responses:
        200:
          description: 'an array of fact ids'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/factIdref'
        400:
          $ref: '#/components/responses/idError'
  /contracts/{contractIdref}/facts/{factIdref}:
    get:
      tags:
        - 'Fact'
      summary: 'Returns all the data of a fact object'
      operationId: 'getFactBy'
      parameters:
        - $ref: '#/components/parameters/contractIdref'
        - $ref: '#/components/parameters/factIdref'
      responses:
        200:
          $ref: '#/components/responses/fact'
        400:
          $ref: '#/components/responses/idError'
components:
  schemas:
    contractIdref:
      type: string
      pattern: '^cont-\w+$'
    personUserIdref:
      type: string
      pattern: '^user-\w+$'
    partyIdref:
      oneOf:
        - $ref: '#/components/schemas/personUserIdref'
        - type: string
          pattern: '^part-\w+$'
    deonticIdref:
      type: string
      pattern: '^deon-\w+$'
    deonticStructuredBlockIdref:
      type: string
      pattern: '^dsbl-\w+$'
    actionIdref:
      type: string
      pattern: '^acti-\w+$'
    ipentityIdref:
      type: string
      pattern: '^ipen-\w+$'
    itemIdref:
      oneOf:
        - $ref: '#/components/schemas/ipentityIdref'
        - type: string
          pattern: '^item-\w+$'
    trackIdref:
      type: string
      pattern: '^trac-\w+$'
    intervalIdref:
      type: string
      pattern: '^inte-\w+$'
    objectIdref:
      oneOf:
        - $ref: '#/components/schemas/itemIdref'
        - $ref: '#/components/schemas/trackIdref'
        - $ref: '#/components/schemas/intervalIdref'
        - type: string
          pattern: '^obje-\w+$'
    factIdref:
      type: string
      pattern: '^fact-\w+$'
    textIdref:
      type: string
      pattern: '^text-\w+$'
    conditionIdref:
      type: string
      pattern: '^cond-\w+$'
    idref:
      oneOf:
        - $ref: '#/components/schemas/contractIdref'
        - $ref: '#/components/schemas/partyIdref'
        - $ref: '#/components/schemas/personUserIdref'
        - $ref: '#/components/schemas/deonticIdref'
        - $ref: '#/components/schemas/deonticStructuredBlockIdref'
        - $ref: '#/components/schemas/actionIdref'
        - $ref: '#/components/schemas/objectIdref'
        - $ref: '#/components/schemas/trackIdref'
        - $ref: '#/components/schemas/intervalIdref'
        - $ref: '#/components/schemas/factIdref'
        - type: string
          pattern: '^id-\w+$'
    IdentifiedThing:
      type: object
      properties:
        identifier:
          type: string
        idRef:
          $ref: '#/components/schemas/idref'
      required:
        - identifier
        - idRef
    WithMetadata:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
    Contract:
      allOf:
        - $ref: '#/components/schemas/IdentifiedThing'
        - $ref: '#/components/schemas/WithMetadata'
        - type: object
          properties:
            idRef:
              $ref: '#/components/schemas/contractIdref'
            governingLaw:
              type: string
            court:
              type: string
            isCourtJurisdictionExclusive:
              type: boolean
            textVersion:
              type: string
            encryptedContractPart:
              type: string
            contractProperty:
              type: object
              description: 'Map where keys are of type: #/components/schemas/ContractRelationsEnum'
              additionalProperties:
                $ref: '#/components/schemas/Contract'
            parties:
              type: object
              description: 'Map where keys are of type: #/components/schemas/partyIdref'
              additionalProperties:
                $ref: '#/components/schemas/Party'
            otherPersonUsers:
              type: object
              description: 'Map where keys are of type: #/components/schemas/personUserIdref'
              additionalProperties:
                $ref: '#/components/schemas/PersonUser'
            deontics:
              type: object
              description: 'Map where keys are of type: #/components/schemas/deonticIdref'
              additionalProperties:
                $ref: '#/components/schemas/Deontic'
            actions:
              type: object
              description: 'Map where keys are of type: #/components/schemas/actionsIdref'
              additionalProperties:
                $ref: '#/components/schemas/Action'
            objects:
              type: object
              description: 'Map where keys are of type: #/components/schemas/objectIdref'
              additionalProperties:
                $ref: '#/components/schemas/Object'
            facts:
              type: object
              description: 'Map where keys are of type: #/components/schemas/factIdref'
              additionalProperties:
                $ref: '#/components/schemas/Fact'
            textClauses:
              type: object
              description: 'Map where keys are of type: #/components/schemas/textIdref'
              additionalProperties:
                type: string
            encryptedContractParts:
              type: object
              description: 'Map where keys are of type: #/components/schemas/idref'
              additionalProperties:
                type: string
            operativePart:
              type: object
              description: 'Map where keys are of type: #/components/schemas/deonticStructuredBlockIdref'
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/deonticIdref'
            signatories:
              type: array
              items:
                $ref: '#/components/schemas/personUserIdref'
          required:
            - deontics
            - actions
    Party:
      allOf:
        - $ref: '#/components/schemas/IdentifiedThing'
        - $ref: '#/components/schemas/WithMetadata'
        - type: object
          discriminator:
            propertyName: type
            mapping:
              CELPerson: '#/components/schemas/CELPerson'
              MCOUser: '#/components/schemas/MCOUser'
              Organization: '#/components/schemas/Organization'
          properties:
            idRef:
              $ref: '#/components/schemas/partyIdref'
            type:
              $ref: '#/components/schemas/PartyTypeEnum'
            details:
              type: object
              description: 'Map where keys strings'
              additionalProperties:
                type: string
            address:
              type: string
            deonticsIssued:
              type: array
              items:
                $ref: '#/components/schemas/deonticIdref'
            actionsIsSubject:
              type: array
              items:
                $ref: '#/components/schemas/actionIdref'
          required:
            - type
    PersonUser:
      allOf:
        - $ref: '#/components/schemas/Party'
        - type: object
          properties:
            idRef:
              $ref: '#/components/schemas/personUserIdref'
            signature:
              type: string
    CELPerson:
      allOf:
        - $ref: '#/components/schemas/PersonUser'
        - type: object
          properties:
            type:
              type: string
              enum:
                - CELPerson
    MCOUser:
      allOf:
        - $ref: '#/components/schemas/PersonUser'
        - type: object
          properties:
            role:
              type: string
              enum:
                - Simple
                - Creator
                - Adaptor
                - Instantiator
                - Producer
                - Distributor
                - EndUser
                - Collective
            socialTag:
              type: string
            actOnBehalfOf:
              type: array
              items:
                $ref: '#/components/schemas/personUserIdref'
            belongsToCollective:
              type: array
              items:
                $ref: '#/components/schemas/personUserIdref'
            isRightsOwnerOf:
              type: array
              items:
                $ref: '#/components/schemas/ipentityIdref'
          required:
            - role
    Organization:
      allOf:
        - $ref: '#/components/schemas/Party'
        - type: object
          properties:
            signatory:
              type: array
              items:
                $ref: '#/components/schemas/personUserIdref'
    Deontic:
      allOf:
        - $ref: '#/components/schemas/IdentifiedThing'
        - $ref: '#/components/schemas/WithMetadata'
        - type: object
          discriminator:
            propertyName: type
            mapping:
              CELPermission: '#/components/schemas/CELPermission'
              MCOPermission: '#/components/schemas/MCOPermission'
          properties:
            idRef:
              $ref: '#/components/schemas/deonticIdref'
            type:
              $ref: '#/components/schemas/DeonticTypeEnum'
            textualClauses:
              type: object
              description: 'Map where keys are of type: #/components/schemas/textIdref'
              additionalProperties:
                type: string
            act:
              $ref: '#/components/schemas/actionIdref'
            actedBySubject:
              $ref: '#/components/schemas/partyIdref'
            actObjects:
              type: array
              items:
                $ref: '#/components/schemas/objectIdref'
            resultsIn:
              type: array
              items:
                $ref: '#/components/schemas/itemIdref'
            constraints:
              type: array
              items:
                $ref: '#/components/schemas/factIdref'
            issuer:
              $ref: '#/components/schemas/partyIdref'
          required:
            - type
            - act
            - actedBySubject
    CELDeonticStructuredClause:
      allOf:
        - $ref: '#/components/schemas/Deontic'
        - type: object
          properties:
            number:
              type: string
            context:
              type: array
              items:
                type: string
            preCondition:
              type: object
              description: 'Map where keys are of type: #/components/schemas/conditionIdref'
              additionalProperties:
                $ref: '#/components/schemas/CELCondition'
            postCondition:
              $ref: '#/components/schemas/CELCondition'
    CELCondition:
      allOf:
        - $ref: '#/components/schemas/IdentifiedThing'
        - type: object
          properties:
            idRef:
              $ref: '#/components/schemas/conditionIdref'
            actionStatus:
              type: string
              enum:
                - ActionStarted
                - ActionDone
            withDelay:
              type: string
            validity:
              type: string
    MCODeonticExpression:
      allOf:
        - $ref: '#/components/schemas/Deontic'
    Permission:
      allOf:
        - $ref: '#/components/schemas/Deontic'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Permission
            percentage:
              type: number
              format: float
            incomePercentage:
              type: number
              format: float
            isExclusive:
              type: boolean
            hasSublicenseRight:
              type: boolean
    CELPermission:
      allOf:
        - $ref: '#/components/schemas/CELDeonticStructuredClause'
        - $ref: '#/components/schemas/Permission'
    MCOPermission:
      allOf:
        - $ref: '#/components/schemas/MCODeonticExpression'
        - $ref: '#/components/schemas/Permission'
    Action:
      allOf:
        - $ref: '#/components/schemas/IdentifiedThing'
        - type: object
          discriminator:
            propertyName: type
            mapping:
              Trade: '#/components/schemas/Trade'
              Provide: '#/components/schemas/Provide'
              Payment: '#/components/schemas/Payment'
              Notify: '#/components/schemas/Notify'
              UserDefinedAction: '#/components/schemas/UserDefinedAction'
          properties:
            idRef:
              $ref: '#/components/schemas/actionIdref'
            type:
              $ref: '#/components/schemas/ActionTypeEnum'
            impliesAlso:
              type: array
              items:
                $ref: '#/components/schemas/actionIdref'
            rightGivenBy:
              type: array
              items:
                $ref: '#/components/schemas/personUserIdref'
          required:
            - type
    Trade:
      allOf:
        - $ref: '#/components/schemas/Action'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Trade
            sellsDeontic:
              $ref: '#/components/schemas/deonticIdref'
          required:
            - sellsDeontic
    Provide:
      allOf:
        - $ref: '#/components/schemas/Action'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Provide
            isOnLoan:
              type: boolean
            recipients:
              type: array
              items:
                $ref: '#/components/schemas/partyIdref'
    Payment:
      allOf:
        - $ref: '#/components/schemas/Action'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Payment
            beneficiaries:
              type: array
              items:
                $ref: '#/components/schemas/partyIdref'
              minItems: 1
            incomeSources:
              type: array
              items:
                $ref: '#/components/schemas/actionIdref'
            amount:
              type: number
              format: float
            currency:
              type: string
            incomePercentage:
              type: number
              format: float
          required:
            - beneficiaries
    Notify:
      allOf:
        - $ref: '#/components/schemas/Action'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Notify
            recipients:
              type: array
              items:
                $ref: '#/components/schemas/partyIdref'
              minItems: 1
            isAbout:
              type: array
              items:
                $ref: '#/components/schemas/actionIdref'
          required:
            - recipients
    UserDefinedAction:
      allOf:
        - $ref: '#/components/schemas/Action'
        - type: object
          properties:
            type:
              type: string
              enum:
                - UserDefinedAction
            href:
              type: string
            name:
              type: string
            standardReference:
              type: string
            definition:
              type: string
          required:
            - name
    Object:
      type: object
      properties:
        idRef:
          $ref: '#/components/schemas/objectIdref'
    Item:
      allOf:
        - $ref: '#/components/schemas/Object'
        - $ref: '#/components/schemas/IdentifiedThing'
        - type: object
          properties:
            idRef:
              $ref: '#/components/schemas/itemIdref'
            relatedIdentifier:
              type: string
    IPEntity:
      allOf:
        - $ref: '#/components/schemas/Item'
        - $ref: '#/components/schemas/WithMetadata'
        - type: object
          discriminator:
            propertyName: type
            mapping:
              Event: '#/components/schemas/Event'
              Segment: '#/components/schemas/Segment'
          properties:
            idRef:
              $ref: '#/components/schemas/ipentityIdref'
            type:
              $ref: '#/components/schemas/IPEntityTypeEnum'
            socialTag:
              type: string
            isDigital:
              type: boolean
            rightsOwner:
              type: array
              items:
                $ref: '#/components/schemas/personUserIdref'
            isMadeUpOf:
              type: array
              items:
                $ref: '#/components/schemas/ipentityIdref'
            resultedFrom:
              type: array
              items:
                $ref: '#/components/schemas/actionIdref'
            isAudio:
              type: boolean
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ipentityIdref'
            tracks:
              type: array
              items:
                $ref: '#/components/schemas/trackIdref'
            intervals:
              type: array
              items:
                $ref: '#/components/schemas/intervalIdref'
          required:
            - type
            - isDigital
    Event:
      allOf:
        - $ref: '#/components/schemas/IPEntity'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Event
    Segment:
      allOf:
        - $ref: '#/components/schemas/IPEntity'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Segment
            segmentOf:
              $ref: '#/components/schemas/ipentityIdref'
            contains:
              type: array
              items:
                $ref: '#/components/schemas/ipentityIdref'
            onTrack:
              type: array
              items:
                $ref: '#/components/schemas/trackIdref'
    Service:
      allOf:
        - $ref: '#/components/schemas/Object'
        - $ref: '#/components/schemas/IdentifiedThing'
        - type: object
          properties:
            idRef:
              $ref: '#/components/schemas/objectIdref'
            type:
              $ref: '#/components/schemas/ServiceTypeEnum'
          required:
            - type
    SubjectWrapperObject:
      allOf:
        - $ref: '#/components/schemas/Object'
        - $ref: '#/components/schemas/IdentifiedThing'
        - type: object
          properties:
            idRef:
              $ref: '#/components/schemas/objectIdref'
            partyRefersTo:
              $ref: '#/components/schemas/partyIdref'
          required:
            - partyRefersTo
    Track:
      allOf:
        - $ref: '#/components/schemas/Object'
        - $ref: '#/components/schemas/IdentifiedThing'
        - type: object
          properties:
            idRef:
              $ref: '#/components/schemas/objectIdref'
            trackNumber:
              type: integer
              minimum: 1
          required:
            - trackNumber
    Interval:
      allOf:
        - $ref: '#/components/schemas/Object'
        - $ref: '#/components/schemas/IdentifiedThing'
        - type: object
          properties:
            idRef:
              $ref: '#/components/schemas/objectIdref'
            start:
              type: string
            end:
              type: string
            duration:
              type: string
            onTimeline:
              type: string
          required:
            - start
            - end
            - duration
    Fact:
      allOf:
        - $ref: '#/components/schemas/IdentifiedThing'
        - type: object
          discriminator:
            propertyName: type
            mapping:
              FactCoposition: '#/components/schemas/FactCoposition'
              ActionEventFact: '#/components/schemas/ActionEventFact'
              TogetherWith: '#/components/schemas/TogetherWith'
              AccessPolicy: '#/components/schemas/AccessPolicy'
              DeliveryModality: '#/components/schemas/DeliveryModality'
              Device: '#/components/schemas/Device'
              IPEntityContext: '#/components/schemas/IPEntityContext'
              Language: '#/components/schemas/Language'
              Length: '#/components/schemas/Length'
              MaterialFormat: '#/components/schemas/MaterialFormat'
              Means: '#/components/schemas/Means'
              Runs: '#/components/schemas/Runs'
              ServiceAccessPolicy: '#/components/schemas/ServiceAccessPolicy'
              ServiceChannelContext: '#/components/schemas/ServiceChannelContext'
              SpatialContext: '#/components/schemas/SpatialContext'
              TemporalContext: '#/components/schemas/TemporalContext'
              UserTimeAccess: '#/components/schemas/UserTimeAccess'
              UserDefinedFact: '#/components/schemas/UserDefinedFact'
          properties:
            idRef:
              $ref: '#/components/schemas/factIdref'
            type:
              $ref: '#/components/schemas/FactTypeEnum'
            isTrue:
              type: boolean
          required:
            - type
    FactCoposition:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - FactCoposition
            compositionType:
              type: string
              enum:
                - Negation
                - Union
                - Intersection
            composedFacts:
              type: array
              items:
                $ref: '#/components/schemas/factIdref'
              minItems: 1
          required:
            - compositionType
            - composedFacts
    ActionEventFact:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - ActionEventFact
            validity:
              type: string
            withDelay:
              type: string
            status:
              type: string
              enum:
                - Started
                - Done
            eventThatMakesTrue:
              $ref: '#/components/schemas/ipentityIdref'
            actionThatMakesTrue:
              $ref: '#/components/schemas/actionIdref'
          required:
            - status
    TogetherWith:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - TogetherWith
            withIPEntity:
              $ref: '#/components/schemas/ipentityIdref'
    AccessPolicy:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - AccessPolicy
            restriction:
              type: string
              enum:
                - FreeOfCharge
                - Pay
                - PayPerPackage
                - PayPerView
                - Subscription
          required:
            - restriction
    DeliveryModality:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - DeliveryModality
            restriction:
              type: string
              enum:
                - Linear
                - Broadcasting
                - Webcasting
                - NonLinear
                - OnDemandBasis
                - OnDemandDownload
                - OnDemandStreaming
          required:
            - restriction
    Device:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Device
            restriction:
              type: string
              enum:
                - Computer
                - MobileDevice
                - MobileBroadcastDevice
                - MobileTelecommunicationDevice
                - RobotDevice
                - StorageDevice
                - TelevisionDevice
                - TelevisionSet
          required:
            - restriction
    IPEntityContext:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - IPEntityContext
            partOf:
              type: array
              items:
                $ref: '#/components/schemas/ipentityIdref'
          required:
            - partOf
    Language:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Language
            languages:
              type: array
              items:
                type: string
                minItems: 1
          required:
            - languages
    Length:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Length
            maxLength:
              type: string
          required:
            - maxLength
    MaterialFormat:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - MaterialFormat
            matchesFormatComplianceProfile:
              type: string
            aspectRatio:
              type: string
            audioFormat:
              type: string
            format:
              type: string
            maxBitrate:
              type: integer
              minimum: 0
            maxLines:
              type: integer
              minimum: 0
            minBitrate:
              type: integer
              minimum: 0
            minLines:
              type: integer
              minimum: 0
            videoFormat:
              type: string
    Means:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Means
            restriction:
              type: string
              enum:
                - Videogram
                - TransmissionTechnology
                - BroadcastTechnology
                - Cable
                - IPNetwork
                - MobileBroadcastTechnology
                - Satellite
                - Terrestrial
                - Internet
                - MobileTechnology
                - MobileTelecommunicationTechnology
          required:
            - restriction
    Runs:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Runs
            numberOfRuns:
              type: integer
              minimum: 0
            validity:
              type: string
            numberOfRepetitions:
              type: integer
              minimum: 0
          required:
            - numberOfRuns
    ServiceAccessPolicy:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - ServiceAccessPolicy
            restriction:
              type: string
              enum:
                - Open
                - Restricted
                - Hotel
                - PublicPerformanceHalls
                - Transportations
                - Airplanes
                - BusesMetro
                - Ships
                - Trains
          required:
            - restriction
    ServiceChannelContext:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - ServiceChannelContext
            servicesAndChannels:
              type: array
              items:
                type: string
                minItems: 1
          required:
            - servicesAndChannels
    SpatialContext:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - SpatialContext
            countries:
              type: array
              items:
                type: string
                minItems: 1
            regions:
              type: array
              items:
                type: string
          required:
            - countries
    TemporalContext:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - TemporalContext
            afterDate:
              type: string
            beforeDate:
              type: string
    UserTimeAccess:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - UserTimeAccess
            restriction:
              type: string
              enum:
                - Unlimited
                - Limited
            validity:
              type: string
          required:
            - restriction
    UserDefinedFact:
      allOf:
        - $ref: '#/components/schemas/Fact'
        - type: object
          properties:
            type:
              type: string
              enum:
                - UserDefinedFact
            href:
              type: string
            name:
              type: string
            standardReference:
              type: string
            definition:
              type: string
          required:
            - name
    ContractRelationsEnum:
      type: string
      enum:
        - supersedes
        - cancels
        - prevailsOver
        - isAmendmentOf
    PartyTypeEnum:
      type: string
      enum:
        - CELPerson
        - MCOUser
        - Organization
    DeonticTypeEnum:
      type: string
      enum:
        - StatementSimple
        - Permission
        - Obligation
        - Prohibition
    ActionTypeEnum:
      type: string
      enum:
        - Simple
        - CreateWork
        - Distribute
        - EndUserAction
        - ModifyCopy
        - Dub
        - MoveContent
        - Render
        - MakeAdaptation
        - MakeCopy (Duplicate)
        - MakeAdaptationInstanceCopy
        - MakeAdaptationManifestationCopy
        - MakeWorkInstanceCopy
        - MakeWorkManifestationCopy
        - MakeInstance (Fixate)
        - MakeAdaptationInstance
        - MakeWorkInstance
        - MakeManifestation
        - MakeAdaptationManifestation
        - MakeWorkManifestation
        - Produce
        - PublicCommunication
        - Broadcast
        - Download
        - Stream
        - CommunicationToThePublic
        - PublicPerformance
        - Synchronise
        - GenericAction
        - Reuse
        - ExploitIPRights
        - Transform
        - Translate
        - MakeCutAndEdit
        - MakeExcerpt
        - MakeRadioProduct
        - Remix
        - CreativeTransform
        - Novelization
        - Prequel
        - Sequel
        - Remake
        - Spinoff
        - RelAct
        - Issue
        - Obtain
        - PossessProperty
        - Revoke
        - Rel-mx-Act
        - Rel-sx-Act
        - Adapt
        - Delete
        - Diminish
        - Embed
        - Enhance
        - Enlarge
        - Execute
        - Install
        - Modify
        - Move
        - Play
        - Print
        - Reduce
        - Uninstall
        - RightsUri
        - Trade
        - Consume
        - Match
        - Provide
        - Payment
        - Notify
        - UserDefinedAction
    IPEntityTypeEnum:
      type: string
      enum:
        - Simple
        - Adaptation
        - Excerpt
        - Copy
        - AdaptationInstanceCopy
        - AdaptationManifestationCopy
        - WorkInstanceCopy
        - WorkManifestationCopy
        - Instance
        - AdaptationInstance
        - WorkInstance
        - Manifestation
        - AdaptationManifestation
        - WorkManifestation
        - Product
        - Work
        - Event
        - Segment
    ServiceTypeEnum:
      type: string
      enum:
        - Simple
        - Authenticate
        - Deliver
        - Describe
        - Identify
        - InteractWith
        - Package
        - Post
        - Present
        - Process
        - Store
        - Verify
    FactTypeEnum:
      type: string
      enum:
        - Simple
        - FactCoposition
        - ActionEventFact
        - TogetherWith
        - ExploitationCondition
        - AccessPolicy
        - CopyrightExceptionFact
        - DeliveryModality
        - Device
        - IPEntityContext
        - Language
        - Length
        - MaterialFormat
        - Means
        - Runs
        - ServiceAccessPolicy
        - ServiceChannelContext
        - SpatialContext
        - TemporalContext
        - UserTimeAccess
        - UserDefinedFact
  parameters:
    contractIdref:
      name: contractIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the contract to get'
      schema:
        $ref: '#/components/schemas/contractIdref'
    personUserIdref:
      name: personUserIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the personUser to get'
      schema:
        $ref: '#/components/schemas/personUserIdref'
    partyIdref:
      name: partyIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the party to get'
      schema:
        $ref: '#/components/schemas/partyIdref'
    deonticIdref:
      name: deonticIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the expression to get'
      schema:
        $ref: '#/components/schemas/deonticIdref'
    deonticStructuredBlockIdref:
      name: deonticStructuredBlockIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the expression block to get'
      schema:
        $ref: '#/components/schemas/deonticStructuredBlockIdref'
    actionIdref:
      name: actionIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the action to get'
      schema:
        $ref: '#/components/schemas/actionIdref'
    ipentityIdref:
      name: ipentityIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the ipentity to get'
      schema:
        $ref: '#/components/schemas/ipentityIdref'
    itemIdref:
      name: itemIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the ipentity to get'
      schema:
        $ref: '#/components/schemas/itemIdref'
    trackIdref:
      name: trackIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the track to get'
      schema:
        $ref: '#/components/schemas/trackIdref'
    intervalIdref:
      name: intervalIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the interval to get'
      schema:
        $ref: '#/components/schemas/intervalIdref'
    objectIdref:
      name: objectIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the object to get'
      schema:
        $ref: '#/components/schemas/objectIdref'
    serviceIdref:
      name: serviceIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the service to get'
      schema:
        $ref: '#/components/schemas/objectIdref'
    factIdref:
      name: factIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the fact to get'
      schema:
        $ref: '#/components/schemas/factIdref'
    textIdref:
      name: textIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the text to get'
      schema:
        $ref: '#/components/schemas/textIdref'
    conditionIdref:
      name: conditionIdref
      in: path
      required: true
      description: 'Alphanumeric ID of the condition to get'
      schema:
        $ref: '#/components/schemas/conditionIdref'
    idref:
      name: idref
      in: path
      required: true
      description: 'Alphanumeric ID of the thing to get'
      schema:
        $ref: '#/components/schemas/idref'
  responses:
    idError:
      description: 'id reference not found'
    contract:
      description: a contract object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contract'
    party:
      description: a party object
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/CELPerson'
              - $ref: '#/components/schemas/MCOUser'
              - $ref: '#/components/schemas/Organization'
            discriminator:
              propertyName: type
              mapping:
                CELPerson: '#/components/schemas/CELPerson'
                MCOUser: '#/components/schemas/MCOUser'
                Organization: '#/components/schemas/Organization'
    personUser:
      description: a cel person or mco user object
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/CELPerson'
              - $ref: '#/components/schemas/MCOUser'
            discriminator:
              propertyName: type
              mapping:
                CELPerson: '#/components/schemas/CELPerson'
                MCOUser: '#/components/schemas/MCOUser'
    deontic:
      description: a deontic expression object
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/CELDeonticStructuredClause'
              - $ref: '#/components/schemas/MCODeonticExpression'
              - $ref: '#/components/schemas/CELPermission'
              - $ref: '#/components/schemas/MCOPermission'
    celCondition:
      description: a cel condition object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CELCondition'
    action:
      description: an action object
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Action'
              - $ref: '#/components/schemas/Trade'
              - $ref: '#/components/schemas/Provide'
              - $ref: '#/components/schemas/Payment'
              - $ref: '#/components/schemas/Notify'
              - $ref: '#/components/schemas/UserDefinedAction'
            discriminator:
              propertyName: type
              mapping:
                Trade: '#/components/schemas/Trade'
                Provide: '#/components/schemas/Provide'
                Payment: '#/components/schemas/Payment'
                Notify: '#/components/schemas/Notify'
                UserDefinedAction: '#/components/schemas/UserDefinedAction'
    object:
      description: an object object
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Item'
              - $ref: '#/components/schemas/IPEntity'
              - $ref: '#/components/schemas/Event'
              - $ref: '#/components/schemas/Segment'
              - $ref: '#/components/schemas/Service'
              - $ref: '#/components/schemas/SubjectWrapperObject'
              - $ref: '#/components/schemas/Track'
              - $ref: '#/components/schemas/Interval'
    ipentity:
      description: an ipentity object
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/IPEntity'
              - $ref: '#/components/schemas/Segment'
            discriminator:
              propertyName: type
              mapping:
                Segment: '#/components/schemas/Segment'
    track:
      description: a track object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Track'
    interval:
      description: an interval object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Interval'
    service:
      description: a service object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Service'
    fact:
      description: a fact object
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Fact'
              - $ref: '#/components/schemas/FactCoposition'
              - $ref: '#/components/schemas/ActionEventFact'
              - $ref: '#/components/schemas/TogetherWith'
              - $ref: '#/components/schemas/AccessPolicy'
              - $ref: '#/components/schemas/DeliveryModality'
              - $ref: '#/components/schemas/Device'
              - $ref: '#/components/schemas/IPEntityContext'
              - $ref: '#/components/schemas/Language'
              - $ref: '#/components/schemas/Length'
              - $ref: '#/components/schemas/MaterialFormat'
              - $ref: '#/components/schemas/Means'
              - $ref: '#/components/schemas/Runs'
              - $ref: '#/components/schemas/ServiceAccessPolicy'
              - $ref: '#/components/schemas/ServiceChannelContext'
              - $ref: '#/components/schemas/SpatialContext'
              - $ref: '#/components/schemas/TemporalContext'
              - $ref: '#/components/schemas/UserTimeAccess'
              - $ref: '#/components/schemas/UserDefinedFact'
            discriminator:
              propertyName: type
              mapping:
                Simple: '#/components/schemas/Fact'
                FactCoposition: '#/components/schemas/FactCoposition'
                ActionEventFact: '#/components/schemas/ActionEventFact'
                TogetherWith: '#/components/schemas/TogetherWith'
                AccessPolicy: '#/components/schemas/AccessPolicy'
                DeliveryModality: '#/components/schemas/DeliveryModality'
                Device: '#/components/schemas/Device'
                IPEntityContext: '#/components/schemas/IPEntityContext'
                Language: '#/components/schemas/Language'
                Length: '#/components/schemas/Length'
                MaterialFormat: '#/components/schemas/MaterialFormat'
                Means: '#/components/schemas/Means'
                Runs: '#/components/schemas/Runs'
                ServiceAccessPolicy: '#/components/schemas/ServiceAccessPolicy'
                ServiceChannelContext: '#/components/schemas/ServiceChannelContext'
                SpatialContext: '#/components/schemas/SpatialContext'
                TemporalContext: '#/components/schemas/TemporalContext'
                UserTimeAccess: '#/components/schemas/UserTimeAccess'
                UserDefinedFact: '#/components/schemas/UserDefinedFact'
